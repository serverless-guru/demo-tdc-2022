AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DomainName:
    Type: String
  HostedZoneId:
    Type: String
  ProjectName:
    Type: String
  DeployBucket:
    Type: String
  DeployPath:
    Type: String

Description: ApiGW and Lambda
Resources:
  HelloWorldLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - ""
        - - "/aws/lambda/"
          - !Ref ProjectName
          - "-hello-world"
      RetentionInDays: 3
  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Join:
          - "-"
          - - !Ref ProjectName
            - "lambda"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            Resource:
            - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-lambda:*'
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            Resource:
            - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-lambda:*:*'
      Path: "/"
      RoleName:
        Fn::Join:
        - "-"
        - - !Ref ProjectName
          - Ref: AWS::Region
          - lambdaRole
  HelloWorldLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref DeployBucket
        S3Key: !Sub '${DeployPath}/hello-world.zip'
      Handler: hello-world.handler
      Runtime: nodejs16.x
      FunctionName: !Sub '${ProjectName}-hello-world'
      MemorySize: 128
      Timeout: 10
      Role:
        Fn::GetAtt:
        - IamRoleLambdaExecution
        - Arn
    DependsOn:
    - HelloWorldLogGroup
  HelloWorldLambdaVersion:
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    Properties:
      FunctionName:
        Ref: HelloWorldLambdaFunction
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ProjectName
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy: ''
  ApiGatewayResourceHelloWorld:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: hello-world
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayMethodHelloWorldGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResourceHelloWorld
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - HelloWorldLambdaFunction
              - Arn
            - "/invocations"
      MethodResponses: []
    DependsOn:
    - GetHelloWorldLambdaPermissionApiGateway
  ApiGatewayDeployment1:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      StageName: dev
      Description: Sample Cloudformation based APIGateway
    DependsOn:
    - ApiGatewayMethodHelloWorldGet
  GetHelloWorldLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - HelloWorldLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - ":execute-api:"
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: ApiGatewayRestApi
          - "/*/*"
  ApiGatewayDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      DomainName: !Ref DomainName
      RegionalCertificateArn: !Ref ApiGatewayCertificate
      SecurityPolicy: 'TLS_1_2'
      EndpointConfiguration:
        Types:
          - REGIONAL
  ApiGatewayMapping:
    DependsOn:
      - ApiGatewayDeployment1
      - ApiGatewayRestApi
      - ApiGatewayDomain
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      BasePath: ''
      DomainName: !Ref ApiGatewayDomain
      RestApiId: !Ref ApiGatewayRestApi
      Stage: dev

  ApiGatewayCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  CustomDomain:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget:
          HostedZoneId:
            Fn::GetAtt:
              - ApiGatewayDomain
              - RegionalHostedZoneId
          DNSName:
            Fn::GetAtt:
              - ApiGatewayDomain
              - RegionalDomainName

